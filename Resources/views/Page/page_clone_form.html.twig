{% block form %}

    {% set url = 'clone_page_to_url' %}
    <form class="form-horizontal" action="{{ admin.generateUrl(url, {'id': admin.id(object), 'uniqid': admin.uniqid, 'subclass': app.request.get('subclass')}) }}" {{ form_enctype(form) }} method="POST">
        {% if form.vars.errors|length > 0 %}
            <div class="sonata-ba-form-error">
                {{ form_errors(form) }}
            </div>
        {% endif %}

        {% for name, form_group in admin.formgroups %}
            <fieldset {% if form_group.collapsed %}class="sonata-ba-fieldset-collapsed"{% endif %}>
                <legend{% if form_group.description != false %} class="sonata-ba-fieldset-collapsed-description"{% endif %}>
                    {% if form_group.collapsed %}
                        <a href="" class="sonata-ba-collapsed" title="{{ 'link_expand'|trans({}, 'SonataAdminBundle') }}">{{ name|trans({}, admin.translationdomain) }}</a>
                    {% else %}
                        {{ name|trans({}, admin.translationdomain) }}
                    {% endif %}
                </legend>

                <div class="sonata-ba-collapsed-fields">
                    {% if form_group.description != false %}
                        <p>{{ form_group.description|raw }}</p>
                    {% endif %}

                    {% for field_name in form_group.fields %}
                        {% if admin.formfielddescriptions[field_name] is defined %}
                            {{ form_row(form[field_name])}}
                        {% endif %}
                    {% endfor %}
                </div>
            </fieldset>
        {% endfor %}

        {{ form_rest(form) }}

        {% block formactions %}
            <div class="well form-actions">
                {% if app.request.isxmlhttprequest %}
                    {% if admin.id(object) %}
                        <input type="submit" class="btn btn-primary" name="btn_update" value="{{ 'btn_update'|trans({}, 'SonataAdminBundle') }}"/>
                    {% else %}
                        <input type="submit" class="btn" name="btn_create" value="{{ 'btn_create'|trans({}, 'SonataAdminBundle') }}"/>
                    {% endif %}
                {% else %}
                    {% if admin.supportsPreviewMode %}
                        <input class="btn btn-info persist-preview" name="btn_preview" type="submit" value="{{ 'btn_preview'|trans({}, 'SonataAdminBundle') }}"/>
                    {% endif %}
                    {% if admin.id(object) %}
                        <input type="submit" class="btn btn-primary" name="btn_update_and_edit" value="{{ 'btn_update_and_edit_again'|trans({}, 'SonataAdminBundle') }}"/>

                        {% if admin.hasroute('list') %}
                            <input type="submit" class="btn" name="btn_update_and_list" value="{{ 'btn_update_and_return_to_list'|trans({}, 'SonataAdminBundle') }}"/>
                        {% endif %}

                        {% if admin.hasroute('delete') and admin.isGranted('DELETE', object) %}
                            {{ 'delete_or'|trans({}, 'SonataAdminBundle') }}
                            <a class="btn btn-danger" href="{{ admin.generateObjectUrl('delete', object) }}">{{ 'link_delete'|trans({}, 'SonataAdminBundle') }}</a>
                        {% endif %}
                    {% else %}
                        <input class="btn btn-primary" type="submit" name="btn_create_and_edit" value="{{ 'btn_create_and_edit_again'|trans({}, 'SonataAdminBundle') }}"/>
                        <input type="submit" class="btn" name="btn_create_and_list" value="{{ 'btn_create_and_return_to_list'|trans({}, 'SonataAdminBundle') }}"/>
                        <input class="btn" type="submit" name="btn_create_and_create" value="{{ 'btn_create_and_create_a_new_one'|trans({}, 'SonataAdminBundle') }}"/>
                    {% endif %}
                {% endif %}
            </div>
        {% endblock formactions %}
    </form>

    <script>

    var config = {
        urlParentGroup: $('#clone_page_url').parent(),
        urlInputField: $('#clone_page_url')
    }

    var globalConfig = {
        urlCheckPath: '{{ path('raindrop_admin_url_check') }}'
    };

    var urlChecker = function (url) {

        var paragraphConfig;

        $.ajax({
            url: globalConfig.urlCheckPath,
            type: 'POST',
            data: 'url=' + url,
            success: function (result) {
                if (result.available) {
                    config.urlParentGroup
                        .removeClass('error')
                        .addClass('success');

                    paragraphConfig = {
                        "html": "Url is not in use at the moment",
                        "class": "",
                        "style": "display:inline; margin-left: 40px; color: #007A2F"
                    };

                } else {
                    config.urlParentGroup
                        .removeClass('success')
                        .addClass('error');

                    paragraphConfig = {
                        "html": "Url taken by page '" + result.page + "'",
                        "class": "",
                        "style": "display:inline; margin-left: 40px; color: #BD0000"
                    };
                }

                config.urlInputField
                    .parent()
                        .find('p').remove()
                    .end()
                    .append($('<p/>', paragraphConfig))
                    ;
            }
        });
    }

    var addUrlCheckerListener = function () {
        config.urlInputField
            .keyup(function (event) {
                clearTimeout(config.eventKeyUpTimeout);
                config.eventKeyUpTimeout = setTimeout(function () {
                    var $el = $(event.currentTarget)
                    var url = $el.val();

                    // empty url is not valid at all
                    if (url === '') {
                        config.urlParentGroup
                            .removeClass('success')
                            .addClass('error');
                        return;
                    }

                    // if url is different from previous one checked
                    if (url !== config.previousUrlCheck) {
                        config.previousUrlCheck = url;
                        urlChecker(url);
                    }

                }, 500);
            });
    }

    $(function(){
        addUrlCheckerListener();
    });
    </script>
{% endblock %}
